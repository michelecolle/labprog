02_1

inizializzazione:
– {} – universal and uniform initialization

int a {10}; ok
int b {10/3}; errore
int b = 10/3; cast non segnalato

02_2

espressioni: qualcosa con un = da qualche parte
int asd = 10;
asd: lvalue
10: rvalue
int foo = asd;
foo: lvalue
asd: rvalue

constexpr double pi = 3.14; //costante dichiarata a compiletime
constexpr int max = 100;
void use (int n)
{
constexpr int c1 = max + 7; // OK: da costanti
const int c2 = n + 7; // OK

c2 = 7; // errore
}


ordine di valutazione
v[i] = ++i; // Ordine di valutazione non definito:
// i a sinistra è letto prima o dopo la
// valutazione di ++i?

v[++i] = i; // Ordine di valutazione non definito:

// Come sopra

int x = ++i + ++i; // Ordine di valutazione non definito:
// lettura e incremento potrebbero
// non essere consecutivi

cout << ++i << ' ' << i << '\n'; // Ordine di valutazione

// non definito

i++ : operatore con side effect, nel senso che restituisce un valore ma modifica anche l'operando

operatore >> (assegnamento dallo stream) sensibile al tipo
come anche le somme ecc.. (non posso sommare una stringa ad un intero)

Istruzioni o statements: qualsiasi cosa seguita da un ;
quindi if, loop, dichiarazioni ecc..
Dichiarazione: istruzione che introduce un nome in
uno scope
– Specifica il nome
– Specifica il tipo
– Opzionalmente, specifica un inizializzatore (valore iniziale)

• Una definizione:
– "Fornisce tutte le informazioni necessarie per
creare l'entità nella sua interezza"
– Può avere un significato diverso a seconda
dell'entità definita:
• Variabile: fornisce tipo e nome, riserva la memoria
• Funzione: fornisce il corpo della funzione
• Classe: fornisce variabili e funzioni membri della classe
• Quando un'entità è definita, per forza è anche
dichiarata

non sonno definizioni:
double sqrt (double);
extern int a;

• Dichiarazione vs definizione riflette
interfaccia vs implementazione
– Interfaccia: di cosa abbiamo bisogno per usare
qualcosa (dichiarazione)
– Implementazione: di cosa abbiamo bisogno
affinché qualcosa faccia ciò che deve (definizione)

int x = 7; // definizione
extern int x; // dichiarazione
extern int x; // ?

• Extern specifica che la dichiarazione non è una definizione
– Poco usato, poco utile

Inizializzazione:
per cpp quella consigliata e'
int a {10};
non inizializzare o assegnare e' pericoloso (anche se mi pare 
che abbiano gestito la cosa, nel senso che perlomeno i tipi numerici
 pare vengano inizializzati a zero in mancanza di inizializzazioni esplicite...)